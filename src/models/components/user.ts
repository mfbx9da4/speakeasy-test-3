/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type User = {
  /**
   * Unique identifier for the user.
   */
  id: string;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Indicates whether the email address has been verified.
   */
  emailVerified: boolean;
  /**
   * GitHub handle of the user.
   */
  githubHandle?: string | undefined;
  /**
   * Display name of the user.
   */
  displayName: string;
  /**
   * URL of the user's photo.
   */
  photoUrl?: string | undefined;
  /**
   * Identifier of the default workspace.
   */
  defaultWorkspaceId?: string | undefined;
  /**
   * Indicates whether the user has been confirmed.
   */
  confirmed: boolean;
  /**
   * Indicates whether the user has been whitelisted.
   */
  whitelisted: boolean;
  /**
   * Timestamp of the last login.
   */
  lastLoginAt: Date;
  /**
   * Indicates whether the user is an admin.
   */
  admin: boolean;
  /**
   * Timestamp of the user's creation.
   */
  createdAt: Date;
  /**
   * Timestamp of the user's last update.
   */
  updatedAt: Date;
};

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    email: z.string(),
    email_verified: z.boolean(),
    github_handle: z.string().optional(),
    display_name: z.string(),
    photo_url: z.string().optional(),
    default_workspace_id: z.string().optional(),
    confirmed: z.boolean(),
    whitelisted: z.boolean(),
    last_login_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    admin: z.boolean(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "email_verified": "emailVerified",
      "github_handle": "githubHandle",
      "display_name": "displayName",
      "photo_url": "photoUrl",
      "default_workspace_id": "defaultWorkspaceId",
      "last_login_at": "lastLoginAt",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type User$Outbound = {
  id: string;
  email: string;
  email_verified: boolean;
  github_handle?: string | undefined;
  display_name: string;
  photo_url?: string | undefined;
  default_workspace_id?: string | undefined;
  confirmed: boolean;
  whitelisted: boolean;
  last_login_at: string;
  admin: boolean;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.string(),
    email: z.string(),
    emailVerified: z.boolean(),
    githubHandle: z.string().optional(),
    displayName: z.string(),
    photoUrl: z.string().optional(),
    defaultWorkspaceId: z.string().optional(),
    confirmed: z.boolean(),
    whitelisted: z.boolean(),
    lastLoginAt: z.date().transform(v => v.toISOString()),
    admin: z.boolean(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      emailVerified: "email_verified",
      githubHandle: "github_handle",
      displayName: "display_name",
      photoUrl: "photo_url",
      defaultWorkspaceId: "default_workspace_id",
      lastLoginAt: "last_login_at",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}
