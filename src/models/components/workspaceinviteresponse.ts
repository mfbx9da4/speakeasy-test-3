/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Relationship = {
  workspaceId: string;
  userId: string;
};

/**
 * A response for workspace user invite
 */
export type WorkspaceInviteResponse = {
  relationship: Relationship;
  inviteLink?: string | null | undefined;
};

/** @internal */
export const Relationship$inboundSchema: z.ZodType<
  Relationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "user_id": "userId",
  });
});

/** @internal */
export type Relationship$Outbound = {
  workspace_id: string;
  user_id: string;
};

/** @internal */
export const Relationship$outboundSchema: z.ZodType<
  Relationship$Outbound,
  z.ZodTypeDef,
  Relationship
> = z.object({
  workspaceId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Relationship$ {
  /** @deprecated use `Relationship$inboundSchema` instead. */
  export const inboundSchema = Relationship$inboundSchema;
  /** @deprecated use `Relationship$outboundSchema` instead. */
  export const outboundSchema = Relationship$outboundSchema;
  /** @deprecated use `Relationship$Outbound` instead. */
  export type Outbound = Relationship$Outbound;
}

/** @internal */
export const WorkspaceInviteResponse$inboundSchema: z.ZodType<
  WorkspaceInviteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  relationship: z.lazy(() => Relationship$inboundSchema),
  invite_link: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "invite_link": "inviteLink",
  });
});

/** @internal */
export type WorkspaceInviteResponse$Outbound = {
  relationship: Relationship$Outbound;
  invite_link?: string | null | undefined;
};

/** @internal */
export const WorkspaceInviteResponse$outboundSchema: z.ZodType<
  WorkspaceInviteResponse$Outbound,
  z.ZodTypeDef,
  WorkspaceInviteResponse
> = z.object({
  relationship: z.lazy(() => Relationship$outboundSchema),
  inviteLink: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    inviteLink: "invite_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceInviteResponse$ {
  /** @deprecated use `WorkspaceInviteResponse$inboundSchema` instead. */
  export const inboundSchema = WorkspaceInviteResponse$inboundSchema;
  /** @deprecated use `WorkspaceInviteResponse$outboundSchema` instead. */
  export const outboundSchema = WorkspaceInviteResponse$outboundSchema;
  /** @deprecated use `WorkspaceInviteResponse$Outbound` instead. */
  export type Outbound = WorkspaceInviteResponse$Outbound;
}
