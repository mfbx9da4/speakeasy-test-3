/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export enum AccountType {
  Free = "free",
  ScaleUp = "scale-up",
  Business = "business",
  Enterprise = "enterprise",
}
export type AccountTypeOpen = OpenEnum<typeof AccountType>;

/** @internal */
export const AccountType$inboundSchema: z.ZodType<
  AccountTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountType$outboundSchema: z.ZodType<
  AccountTypeOpen,
  z.ZodTypeDef,
  AccountTypeOpen
> = z.union([
  z.nativeEnum(AccountType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}
