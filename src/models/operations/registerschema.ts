/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer;
};

/**
 * The schema file to upload provided as a multipart/form-data file segment.
 */
export type RegisterSchemaRequestBody = {
  file: FileT | Blob;
};

export type RegisterSchemaRequest = {
  /**
   * The ID of the Api to get the schema for.
   */
  apiID: string;
  /**
   * The version ID of the Api to delete metadata for.
   */
  versionID: string;
  /**
   * The schema file to upload provided as a multipart/form-data file segment.
   */
  requestBody: RegisterSchemaRequestBody;
};

export type RegisterSchemaResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

/** @internal */
export const RegisterSchemaRequestBody$inboundSchema: z.ZodType<
  RegisterSchemaRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => FileT$inboundSchema),
});

/** @internal */
export type RegisterSchemaRequestBody$Outbound = {
  file: FileT$Outbound | Blob;
};

/** @internal */
export const RegisterSchemaRequestBody$outboundSchema: z.ZodType<
  RegisterSchemaRequestBody$Outbound,
  z.ZodTypeDef,
  RegisterSchemaRequestBody
> = z.object({
  file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterSchemaRequestBody$ {
  /** @deprecated use `RegisterSchemaRequestBody$inboundSchema` instead. */
  export const inboundSchema = RegisterSchemaRequestBody$inboundSchema;
  /** @deprecated use `RegisterSchemaRequestBody$outboundSchema` instead. */
  export const outboundSchema = RegisterSchemaRequestBody$outboundSchema;
  /** @deprecated use `RegisterSchemaRequestBody$Outbound` instead. */
  export type Outbound = RegisterSchemaRequestBody$Outbound;
}

/** @internal */
export const RegisterSchemaRequest$inboundSchema: z.ZodType<
  RegisterSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  RequestBody: z.lazy(() => RegisterSchemaRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RegisterSchemaRequest$Outbound = {
  apiID: string;
  versionID: string;
  RequestBody: RegisterSchemaRequestBody$Outbound;
};

/** @internal */
export const RegisterSchemaRequest$outboundSchema: z.ZodType<
  RegisterSchemaRequest$Outbound,
  z.ZodTypeDef,
  RegisterSchemaRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  requestBody: z.lazy(() => RegisterSchemaRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterSchemaRequest$ {
  /** @deprecated use `RegisterSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = RegisterSchemaRequest$inboundSchema;
  /** @deprecated use `RegisterSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = RegisterSchemaRequest$outboundSchema;
  /** @deprecated use `RegisterSchemaRequest$Outbound` instead. */
  export type Outbound = RegisterSchemaRequest$Outbound;
}

/** @internal */
export const RegisterSchemaResponse$inboundSchema: z.ZodType<
  RegisterSchemaResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Error": "error",
  });
});

/** @internal */
export type RegisterSchemaResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const RegisterSchemaResponse$outboundSchema: z.ZodType<
  RegisterSchemaResponse$Outbound,
  z.ZodTypeDef,
  RegisterSchemaResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterSchemaResponse$ {
  /** @deprecated use `RegisterSchemaResponse$inboundSchema` instead. */
  export const inboundSchema = RegisterSchemaResponse$inboundSchema;
  /** @deprecated use `RegisterSchemaResponse$outboundSchema` instead. */
  export const outboundSchema = RegisterSchemaResponse$outboundSchema;
  /** @deprecated use `RegisterSchemaResponse$Outbound` instead. */
  export type Outbound = RegisterSchemaResponse$Outbound;
}
