/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SuggestRequest = {
  xSessionId: string;
  /**
   * The OAS summary and diagnostics to use for the suggestion.
   */
  suggestRequestBody: components.SuggestRequestBody;
};

export type SuggestResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * An overlay containing the suggested spec modifications.
   */
  schema?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export const SuggestRequest$inboundSchema: z.ZodType<
  SuggestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-session-id": z.string(),
  SuggestRequestBody: components.SuggestRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-session-id": "xSessionId",
    "SuggestRequestBody": "suggestRequestBody",
  });
});

/** @internal */
export type SuggestRequest$Outbound = {
  "x-session-id": string;
  SuggestRequestBody: components.SuggestRequestBody$Outbound;
};

/** @internal */
export const SuggestRequest$outboundSchema: z.ZodType<
  SuggestRequest$Outbound,
  z.ZodTypeDef,
  SuggestRequest
> = z.object({
  xSessionId: z.string(),
  suggestRequestBody: components.SuggestRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xSessionId: "x-session-id",
    suggestRequestBody: "SuggestRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestRequest$ {
  /** @deprecated use `SuggestRequest$inboundSchema` instead. */
  export const inboundSchema = SuggestRequest$inboundSchema;
  /** @deprecated use `SuggestRequest$outboundSchema` instead. */
  export const outboundSchema = SuggestRequest$outboundSchema;
  /** @deprecated use `SuggestRequest$Outbound` instead. */
  export type Outbound = SuggestRequest$Outbound;
}

/** @internal */
export const SuggestResponse$inboundSchema: z.ZodType<
  SuggestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Schema: z.instanceof(ReadableStream<Uint8Array>).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Schema": "schema",
  });
});

/** @internal */
export type SuggestResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Schema?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export const SuggestResponse$outboundSchema: z.ZodType<
  SuggestResponse$Outbound,
  z.ZodTypeDef,
  SuggestResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  schema: z.instanceof(ReadableStream<Uint8Array>).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    schema: "Schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestResponse$ {
  /** @deprecated use `SuggestResponse$inboundSchema` instead. */
  export const inboundSchema = SuggestResponse$inboundSchema;
  /** @deprecated use `SuggestResponse$outboundSchema` instead. */
  export const outboundSchema = SuggestResponse$outboundSchema;
  /** @deprecated use `SuggestResponse$Outbound` instead. */
  export type Outbound = SuggestResponse$Outbound;
}
