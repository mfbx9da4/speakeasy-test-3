/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type GetAllForVersionApiEndpointsRequest = {
  /**
   * The ID of the Api to retrieve ApiEndpoints for.
   */
  apiID: string;
  /**
   * The version ID of the Api to retrieve ApiEndpoints for.
   */
  versionID: string;
};

export type GetAllForVersionApiEndpointsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  apiEndpoints?: Array<components.ApiEndpoint> | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const GetAllForVersionApiEndpointsRequest$inboundSchema: z.ZodType<
  GetAllForVersionApiEndpointsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
});

/** @internal */
export type GetAllForVersionApiEndpointsRequest$Outbound = {
  apiID: string;
  versionID: string;
};

/** @internal */
export const GetAllForVersionApiEndpointsRequest$outboundSchema: z.ZodType<
  GetAllForVersionApiEndpointsRequest$Outbound,
  z.ZodTypeDef,
  GetAllForVersionApiEndpointsRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllForVersionApiEndpointsRequest$ {
  /** @deprecated use `GetAllForVersionApiEndpointsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAllForVersionApiEndpointsRequest$inboundSchema;
  /** @deprecated use `GetAllForVersionApiEndpointsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAllForVersionApiEndpointsRequest$outboundSchema;
  /** @deprecated use `GetAllForVersionApiEndpointsRequest$Outbound` instead. */
  export type Outbound = GetAllForVersionApiEndpointsRequest$Outbound;
}

/** @internal */
export const GetAllForVersionApiEndpointsResponse$inboundSchema: z.ZodType<
  GetAllForVersionApiEndpointsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  APIEndpoints: z.array(components.ApiEndpoint$inboundSchema).optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "APIEndpoints": "apiEndpoints",
    "Error": "error",
  });
});

/** @internal */
export type GetAllForVersionApiEndpointsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  APIEndpoints?: Array<components.ApiEndpoint$Outbound> | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetAllForVersionApiEndpointsResponse$outboundSchema: z.ZodType<
  GetAllForVersionApiEndpointsResponse$Outbound,
  z.ZodTypeDef,
  GetAllForVersionApiEndpointsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  apiEndpoints: z.array(components.ApiEndpoint$outboundSchema).optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    apiEndpoints: "APIEndpoints",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllForVersionApiEndpointsResponse$ {
  /** @deprecated use `GetAllForVersionApiEndpointsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetAllForVersionApiEndpointsResponse$inboundSchema;
  /** @deprecated use `GetAllForVersionApiEndpointsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAllForVersionApiEndpointsResponse$outboundSchema;
  /** @deprecated use `GetAllForVersionApiEndpointsResponse$Outbound` instead. */
  export type Outbound = GetAllForVersionApiEndpointsResponse$Outbound;
}
