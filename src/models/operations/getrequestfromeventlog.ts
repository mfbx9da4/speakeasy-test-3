/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type GetRequestFromEventLogRequest = {
  /**
   * The ID of the request to retrieve.
   */
  requestID: string;
};

export type GetRequestFromEventLogResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  unboundedRequest?: components.UnboundedRequest | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const GetRequestFromEventLogRequest$inboundSchema: z.ZodType<
  GetRequestFromEventLogRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestID: z.string(),
});

/** @internal */
export type GetRequestFromEventLogRequest$Outbound = {
  requestID: string;
};

/** @internal */
export const GetRequestFromEventLogRequest$outboundSchema: z.ZodType<
  GetRequestFromEventLogRequest$Outbound,
  z.ZodTypeDef,
  GetRequestFromEventLogRequest
> = z.object({
  requestID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestFromEventLogRequest$ {
  /** @deprecated use `GetRequestFromEventLogRequest$inboundSchema` instead. */
  export const inboundSchema = GetRequestFromEventLogRequest$inboundSchema;
  /** @deprecated use `GetRequestFromEventLogRequest$outboundSchema` instead. */
  export const outboundSchema = GetRequestFromEventLogRequest$outboundSchema;
  /** @deprecated use `GetRequestFromEventLogRequest$Outbound` instead. */
  export type Outbound = GetRequestFromEventLogRequest$Outbound;
}

/** @internal */
export const GetRequestFromEventLogResponse$inboundSchema: z.ZodType<
  GetRequestFromEventLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UnboundedRequest: components.UnboundedRequest$inboundSchema.optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UnboundedRequest": "unboundedRequest",
    "Error": "error",
  });
});

/** @internal */
export type GetRequestFromEventLogResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UnboundedRequest?: components.UnboundedRequest$Outbound | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetRequestFromEventLogResponse$outboundSchema: z.ZodType<
  GetRequestFromEventLogResponse$Outbound,
  z.ZodTypeDef,
  GetRequestFromEventLogResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  unboundedRequest: components.UnboundedRequest$outboundSchema.optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    unboundedRequest: "UnboundedRequest",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestFromEventLogResponse$ {
  /** @deprecated use `GetRequestFromEventLogResponse$inboundSchema` instead. */
  export const inboundSchema = GetRequestFromEventLogResponse$inboundSchema;
  /** @deprecated use `GetRequestFromEventLogResponse$outboundSchema` instead. */
  export const outboundSchema = GetRequestFromEventLogResponse$outboundSchema;
  /** @deprecated use `GetRequestFromEventLogResponse$Outbound` instead. */
  export type Outbound = GetRequestFromEventLogResponse$Outbound;
}
