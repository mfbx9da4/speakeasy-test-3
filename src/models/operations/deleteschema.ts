/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type DeleteSchemaRequest = {
  /**
   * The ID of the Api to delete schemas for.
   */
  apiID: string;
  /**
   * The version ID of the Api to delete metadata for.
   */
  versionID: string;
  /**
   * The revision ID of the schema to delete.
   */
  revisionID: string;
};

export type DeleteSchemaResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const DeleteSchemaRequest$inboundSchema: z.ZodType<
  DeleteSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/** @internal */
export type DeleteSchemaRequest$Outbound = {
  apiID: string;
  versionID: string;
  revisionID: string;
};

/** @internal */
export const DeleteSchemaRequest$outboundSchema: z.ZodType<
  DeleteSchemaRequest$Outbound,
  z.ZodTypeDef,
  DeleteSchemaRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSchemaRequest$ {
  /** @deprecated use `DeleteSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSchemaRequest$inboundSchema;
  /** @deprecated use `DeleteSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSchemaRequest$outboundSchema;
  /** @deprecated use `DeleteSchemaRequest$Outbound` instead. */
  export type Outbound = DeleteSchemaRequest$Outbound;
}

/** @internal */
export const DeleteSchemaResponse$inboundSchema: z.ZodType<
  DeleteSchemaResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Error": "error",
  });
});

/** @internal */
export type DeleteSchemaResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const DeleteSchemaResponse$outboundSchema: z.ZodType<
  DeleteSchemaResponse$Outbound,
  z.ZodTypeDef,
  DeleteSchemaResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSchemaResponse$ {
  /** @deprecated use `DeleteSchemaResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteSchemaResponse$inboundSchema;
  /** @deprecated use `DeleteSchemaResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteSchemaResponse$outboundSchema;
  /** @deprecated use `DeleteSchemaResponse$Outbound` instead. */
  export type Outbound = DeleteSchemaResponse$Outbound;
}
