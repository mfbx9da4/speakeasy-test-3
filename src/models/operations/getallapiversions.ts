/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

/**
 * Configuration for filter operations
 */
export type QueryParamOp = {
  /**
   * Whether to AND or OR the filters
   */
  and: boolean;
};

export type GetAllApiVersionsRequest = {
  /**
   * The ID of the Api to retrieve.
   */
  apiID: string;
  /**
   * Configuration for filter operations
   */
  op?: QueryParamOp | undefined;
  /**
   * Metadata to filter Apis on
   */
  metadata?: { [k: string]: Array<string> } | undefined;
};

export type GetAllApiVersionsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  apis?: Array<components.Api> | undefined;
};

/** @internal */
export const QueryParamOp$inboundSchema: z.ZodType<
  QueryParamOp,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.boolean(),
});

/** @internal */
export type QueryParamOp$Outbound = {
  and: boolean;
};

/** @internal */
export const QueryParamOp$outboundSchema: z.ZodType<
  QueryParamOp$Outbound,
  z.ZodTypeDef,
  QueryParamOp
> = z.object({
  and: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOp$ {
  /** @deprecated use `QueryParamOp$inboundSchema` instead. */
  export const inboundSchema = QueryParamOp$inboundSchema;
  /** @deprecated use `QueryParamOp$outboundSchema` instead. */
  export const outboundSchema = QueryParamOp$outboundSchema;
  /** @deprecated use `QueryParamOp$Outbound` instead. */
  export type Outbound = QueryParamOp$Outbound;
}

/** @internal */
export const GetAllApiVersionsRequest$inboundSchema: z.ZodType<
  GetAllApiVersionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  op: z.lazy(() => QueryParamOp$inboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type GetAllApiVersionsRequest$Outbound = {
  apiID: string;
  op?: QueryParamOp$Outbound | undefined;
  metadata?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const GetAllApiVersionsRequest$outboundSchema: z.ZodType<
  GetAllApiVersionsRequest$Outbound,
  z.ZodTypeDef,
  GetAllApiVersionsRequest
> = z.object({
  apiID: z.string(),
  op: z.lazy(() => QueryParamOp$outboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllApiVersionsRequest$ {
  /** @deprecated use `GetAllApiVersionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllApiVersionsRequest$inboundSchema;
  /** @deprecated use `GetAllApiVersionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllApiVersionsRequest$outboundSchema;
  /** @deprecated use `GetAllApiVersionsRequest$Outbound` instead. */
  export type Outbound = GetAllApiVersionsRequest$Outbound;
}

/** @internal */
export const GetAllApiVersionsResponse$inboundSchema: z.ZodType<
  GetAllApiVersionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Apis: z.array(components.Api$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Apis": "apis",
  });
});

/** @internal */
export type GetAllApiVersionsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Apis?: Array<components.Api$Outbound> | undefined;
};

/** @internal */
export const GetAllApiVersionsResponse$outboundSchema: z.ZodType<
  GetAllApiVersionsResponse$Outbound,
  z.ZodTypeDef,
  GetAllApiVersionsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  apis: z.array(components.Api$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    apis: "Apis",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllApiVersionsResponse$ {
  /** @deprecated use `GetAllApiVersionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllApiVersionsResponse$inboundSchema;
  /** @deprecated use `GetAllApiVersionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllApiVersionsResponse$outboundSchema;
  /** @deprecated use `GetAllApiVersionsResponse$Outbound` instead. */
  export type Outbound = GetAllApiVersionsResponse$Outbound;
}
