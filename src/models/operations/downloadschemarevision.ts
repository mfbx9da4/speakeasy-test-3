/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type DownloadSchemaRevisionRequest = {
  /**
   * The ID of the Api to retrieve schemas for.
   */
  apiID: string;
  /**
   * The version ID of the Api to delete metadata for.
   */
  versionID: string;
  /**
   * The revision ID of the schema to retrieve.
   */
  revisionID: string;
};

export type DownloadSchemaRevisionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  twoHundredApplicationJsonSchema?: ReadableStream<Uint8Array> | undefined;
  /**
   * OK
   */
  twoHundredApplicationXYamlSchema?: ReadableStream<Uint8Array> | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const DownloadSchemaRevisionRequest$inboundSchema: z.ZodType<
  DownloadSchemaRevisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/** @internal */
export type DownloadSchemaRevisionRequest$Outbound = {
  apiID: string;
  versionID: string;
  revisionID: string;
};

/** @internal */
export const DownloadSchemaRevisionRequest$outboundSchema: z.ZodType<
  DownloadSchemaRevisionRequest$Outbound,
  z.ZodTypeDef,
  DownloadSchemaRevisionRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadSchemaRevisionRequest$ {
  /** @deprecated use `DownloadSchemaRevisionRequest$inboundSchema` instead. */
  export const inboundSchema = DownloadSchemaRevisionRequest$inboundSchema;
  /** @deprecated use `DownloadSchemaRevisionRequest$outboundSchema` instead. */
  export const outboundSchema = DownloadSchemaRevisionRequest$outboundSchema;
  /** @deprecated use `DownloadSchemaRevisionRequest$Outbound` instead. */
  export type Outbound = DownloadSchemaRevisionRequest$Outbound;
}

/** @internal */
export const DownloadSchemaRevisionResponse$inboundSchema: z.ZodType<
  DownloadSchemaRevisionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_Schema": z.instanceof(ReadableStream<Uint8Array>)
    .optional(),
  "200_application/x-yaml_Schema": z.instanceof(ReadableStream<Uint8Array>)
    .optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_Schema": "twoHundredApplicationJsonSchema",
    "200_application/x-yaml_Schema": "twoHundredApplicationXYamlSchema",
    "Error": "error",
  });
});

/** @internal */
export type DownloadSchemaRevisionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_Schema"?: ReadableStream<Uint8Array> | undefined;
  "200_application/x-yaml_Schema"?: ReadableStream<Uint8Array> | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const DownloadSchemaRevisionResponse$outboundSchema: z.ZodType<
  DownloadSchemaRevisionResponse$Outbound,
  z.ZodTypeDef,
  DownloadSchemaRevisionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonSchema: z.instanceof(ReadableStream<Uint8Array>)
    .optional(),
  twoHundredApplicationXYamlSchema: z.instanceof(ReadableStream<Uint8Array>)
    .optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonSchema: "200_application/json_Schema",
    twoHundredApplicationXYamlSchema: "200_application/x-yaml_Schema",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadSchemaRevisionResponse$ {
  /** @deprecated use `DownloadSchemaRevisionResponse$inboundSchema` instead. */
  export const inboundSchema = DownloadSchemaRevisionResponse$inboundSchema;
  /** @deprecated use `DownloadSchemaRevisionResponse$outboundSchema` instead. */
  export const outboundSchema = DownloadSchemaRevisionResponse$outboundSchema;
  /** @deprecated use `DownloadSchemaRevisionResponse$Outbound` instead. */
  export type Outbound = DownloadSchemaRevisionResponse$Outbound;
}
