/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type QueryEventLogRequest = {
  /**
   * The filter to apply to the query.
   */
  filters?: components.Filters | undefined;
};

export type QueryEventLogResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  boundedRequests?: Array<components.BoundedRequest> | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const QueryEventLogRequest$inboundSchema: z.ZodType<
  QueryEventLogRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: components.Filters$inboundSchema.optional(),
});

/** @internal */
export type QueryEventLogRequest$Outbound = {
  filters?: components.Filters$Outbound | undefined;
};

/** @internal */
export const QueryEventLogRequest$outboundSchema: z.ZodType<
  QueryEventLogRequest$Outbound,
  z.ZodTypeDef,
  QueryEventLogRequest
> = z.object({
  filters: components.Filters$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventLogRequest$ {
  /** @deprecated use `QueryEventLogRequest$inboundSchema` instead. */
  export const inboundSchema = QueryEventLogRequest$inboundSchema;
  /** @deprecated use `QueryEventLogRequest$outboundSchema` instead. */
  export const outboundSchema = QueryEventLogRequest$outboundSchema;
  /** @deprecated use `QueryEventLogRequest$Outbound` instead. */
  export type Outbound = QueryEventLogRequest$Outbound;
}

/** @internal */
export const QueryEventLogResponse$inboundSchema: z.ZodType<
  QueryEventLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  BoundedRequests: z.array(components.BoundedRequest$inboundSchema).optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "BoundedRequests": "boundedRequests",
    "Error": "error",
  });
});

/** @internal */
export type QueryEventLogResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  BoundedRequests?: Array<components.BoundedRequest$Outbound> | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const QueryEventLogResponse$outboundSchema: z.ZodType<
  QueryEventLogResponse$Outbound,
  z.ZodTypeDef,
  QueryEventLogResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  boundedRequests: z.array(components.BoundedRequest$outboundSchema).optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    boundedRequests: "BoundedRequests",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventLogResponse$ {
  /** @deprecated use `QueryEventLogResponse$inboundSchema` instead. */
  export const inboundSchema = QueryEventLogResponse$inboundSchema;
  /** @deprecated use `QueryEventLogResponse$outboundSchema` instead. */
  export const outboundSchema = QueryEventLogResponse$outboundSchema;
  /** @deprecated use `QueryEventLogResponse$Outbound` instead. */
  export type Outbound = QueryEventLogResponse$Outbound;
}
