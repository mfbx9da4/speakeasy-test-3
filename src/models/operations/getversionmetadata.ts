/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

export type GetVersionMetadataRequest = {
  /**
   * The ID of the Api to retrieve metadata for.
   */
  apiID: string;
  /**
   * The version ID of the Api to retrieve metadata for.
   */
  versionID: string;
};

export type GetVersionMetadataResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  versionMetadata?: Array<components.VersionMetadata> | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const GetVersionMetadataRequest$inboundSchema: z.ZodType<
  GetVersionMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
});

/** @internal */
export type GetVersionMetadataRequest$Outbound = {
  apiID: string;
  versionID: string;
};

/** @internal */
export const GetVersionMetadataRequest$outboundSchema: z.ZodType<
  GetVersionMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetVersionMetadataRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionMetadataRequest$ {
  /** @deprecated use `GetVersionMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = GetVersionMetadataRequest$inboundSchema;
  /** @deprecated use `GetVersionMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = GetVersionMetadataRequest$outboundSchema;
  /** @deprecated use `GetVersionMetadataRequest$Outbound` instead. */
  export type Outbound = GetVersionMetadataRequest$Outbound;
}

/** @internal */
export const GetVersionMetadataResponse$inboundSchema: z.ZodType<
  GetVersionMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  VersionMetadata: z.array(components.VersionMetadata$inboundSchema).optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "VersionMetadata": "versionMetadata",
    "Error": "error",
  });
});

/** @internal */
export type GetVersionMetadataResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  VersionMetadata?: Array<components.VersionMetadata$Outbound> | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetVersionMetadataResponse$outboundSchema: z.ZodType<
  GetVersionMetadataResponse$Outbound,
  z.ZodTypeDef,
  GetVersionMetadataResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  versionMetadata: z.array(components.VersionMetadata$outboundSchema)
    .optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    versionMetadata: "VersionMetadata",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionMetadataResponse$ {
  /** @deprecated use `GetVersionMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = GetVersionMetadataResponse$inboundSchema;
  /** @deprecated use `GetVersionMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = GetVersionMetadataResponse$outboundSchema;
  /** @deprecated use `GetVersionMetadataResponse$Outbound` instead. */
  export type Outbound = GetVersionMetadataResponse$Outbound;
}
