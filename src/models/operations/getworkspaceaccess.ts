/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type GetWorkspaceAccessRequest = {
  /**
   * Unique identifier of the generation target.
   */
  genLockId?: string | undefined;
  /**
   * The type of the generated target.
   */
  targetType?: string | undefined;
  /**
   * Skip side-effects like incrementing metrics.
   */
  passive?: boolean | undefined;
};

export type GetWorkspaceAccessResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  accessDetails?: components.AccessDetails | undefined;
};

/** @internal */
export const GetWorkspaceAccessRequest$inboundSchema: z.ZodType<
  GetWorkspaceAccessRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  genLockId: z.string().optional(),
  targetType: z.string().optional(),
  passive: z.boolean().optional(),
});

/** @internal */
export type GetWorkspaceAccessRequest$Outbound = {
  genLockId?: string | undefined;
  targetType?: string | undefined;
  passive?: boolean | undefined;
};

/** @internal */
export const GetWorkspaceAccessRequest$outboundSchema: z.ZodType<
  GetWorkspaceAccessRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceAccessRequest
> = z.object({
  genLockId: z.string().optional(),
  targetType: z.string().optional(),
  passive: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceAccessRequest$ {
  /** @deprecated use `GetWorkspaceAccessRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceAccessRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceAccessRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceAccessRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceAccessRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceAccessRequest$Outbound;
}

/** @internal */
export const GetWorkspaceAccessResponse$inboundSchema: z.ZodType<
  GetWorkspaceAccessResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  AccessDetails: components.AccessDetails$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "AccessDetails": "accessDetails",
  });
});

/** @internal */
export type GetWorkspaceAccessResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  AccessDetails?: components.AccessDetails$Outbound | undefined;
};

/** @internal */
export const GetWorkspaceAccessResponse$outboundSchema: z.ZodType<
  GetWorkspaceAccessResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceAccessResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  accessDetails: components.AccessDetails$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    accessDetails: "AccessDetails",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceAccessResponse$ {
  /** @deprecated use `GetWorkspaceAccessResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceAccessResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceAccessResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceAccessResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceAccessResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceAccessResponse$Outbound;
}
