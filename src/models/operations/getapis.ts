/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";

/**
 * Configuration for filter operations
 */
export type Op = {
  /**
   * Whether to AND or OR the filters
   */
  and: boolean;
};

export type GetApisRequest = {
  /**
   * Configuration for filter operations
   */
  op?: Op | undefined;
  /**
   * Metadata to filter Apis on
   */
  metadata?: { [k: string]: Array<string> } | undefined;
};

export type GetApisResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  apis?: Array<components.Api> | undefined;
  /**
   * Default error response
   */
  error?: errors.ErrorT | undefined;
};

/** @internal */
export const Op$inboundSchema: z.ZodType<Op, z.ZodTypeDef, unknown> = z.object({
  and: z.boolean(),
});

/** @internal */
export type Op$Outbound = {
  and: boolean;
};

/** @internal */
export const Op$outboundSchema: z.ZodType<Op$Outbound, z.ZodTypeDef, Op> = z
  .object({
    and: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Op$ {
  /** @deprecated use `Op$inboundSchema` instead. */
  export const inboundSchema = Op$inboundSchema;
  /** @deprecated use `Op$outboundSchema` instead. */
  export const outboundSchema = Op$outboundSchema;
  /** @deprecated use `Op$Outbound` instead. */
  export type Outbound = Op$Outbound;
}

/** @internal */
export const GetApisRequest$inboundSchema: z.ZodType<
  GetApisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  op: z.lazy(() => Op$inboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type GetApisRequest$Outbound = {
  op?: Op$Outbound | undefined;
  metadata?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const GetApisRequest$outboundSchema: z.ZodType<
  GetApisRequest$Outbound,
  z.ZodTypeDef,
  GetApisRequest
> = z.object({
  op: z.lazy(() => Op$outboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApisRequest$ {
  /** @deprecated use `GetApisRequest$inboundSchema` instead. */
  export const inboundSchema = GetApisRequest$inboundSchema;
  /** @deprecated use `GetApisRequest$outboundSchema` instead. */
  export const outboundSchema = GetApisRequest$outboundSchema;
  /** @deprecated use `GetApisRequest$Outbound` instead. */
  export type Outbound = GetApisRequest$Outbound;
}

/** @internal */
export const GetApisResponse$inboundSchema: z.ZodType<
  GetApisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Apis: z.array(components.Api$inboundSchema).optional(),
  Error: errors.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Apis": "apis",
    "Error": "error",
  });
});

/** @internal */
export type GetApisResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Apis?: Array<components.Api$Outbound> | undefined;
  Error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetApisResponse$outboundSchema: z.ZodType<
  GetApisResponse$Outbound,
  z.ZodTypeDef,
  GetApisResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  apis: z.array(components.Api$outboundSchema).optional(),
  error: errors.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    apis: "Apis",
    error: "Error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApisResponse$ {
  /** @deprecated use `GetApisResponse$inboundSchema` instead. */
  export const inboundSchema = GetApisResponse$inboundSchema;
  /** @deprecated use `GetApisResponse$outboundSchema` instead. */
  export const outboundSchema = GetApisResponse$outboundSchema;
  /** @deprecated use `GetApisResponse$Outbound` instead. */
  export type Outbound = GetApisResponse$Outbound;
}
