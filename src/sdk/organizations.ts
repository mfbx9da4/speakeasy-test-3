/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreateFreeTrial } from "../funcs/organizationsCreateFreeTrial.js";
import { organizationsGetOrganization } from "../funcs/organizationsGetOrganization.js";
import { organizationsGetOrganizations } from "../funcs/organizationsGetOrganizations.js";
import { organizationsGetOrganizationUsage } from "../funcs/organizationsGetOrganizationUsage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organizations extends ClientSDK {
  /**
   * Get organizations for a user
   *
   * @remarks
   * Returns a list of organizations a user has access too
   */
  async getOrganizations(
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationsResponse> {
    return unwrapAsync(organizationsGetOrganizations(
      this,
      options,
    ));
  }

  /**
   * Get organization
   *
   * @remarks
   * Get information about a particular organization.
   */
  async getOrganization(
    organizationID: string,
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationResponse> {
    return unwrapAsync(organizationsGetOrganization(
      this,
      organizationID,
      options,
    ));
  }

  /**
   * Create a free trial for an organization
   *
   * @remarks
   * Creates a free trial for an organization
   */
  async createFreeTrial(
    options?: RequestOptions,
  ): Promise<operations.CreateFreeTrialResponse> {
    return unwrapAsync(organizationsCreateFreeTrial(
      this,
      options,
    ));
  }

  /**
   * Get billing usage summary for a particular organization
   *
   * @remarks
   * Returns a billing usage summary by target languages for a particular organization
   */
  async getOrganizationUsage(
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationUsageResponse> {
    return unwrapAsync(organizationsGetOrganizationUsage(
      this,
      options,
    ));
  }
}
