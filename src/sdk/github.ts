/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { githubCheckAccess } from "../funcs/githubCheckAccess.js";
import { githubConfigureCodeSamples } from "../funcs/githubConfigureCodeSamples.js";
import { githubConfigureMintlifyRepo } from "../funcs/githubConfigureMintlifyRepo.js";
import { githubConfigureTarget } from "../funcs/githubConfigureTarget.js";
import { githubFetchPublishingPRs } from "../funcs/githubFetchPublishingPRs.js";
import { githubGetAction } from "../funcs/githubGetAction.js";
import { githubGithubCheckPublishingSecrets } from "../funcs/githubGithubCheckPublishingSecrets.js";
import { githubGithubStorePublishingSecrets } from "../funcs/githubGithubStorePublishingSecrets.js";
import { githubTriggerAction } from "../funcs/githubTriggerAction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Github extends ClientSDK {
  async checkAccess(
    org: string,
    repo: string,
    options?: RequestOptions,
  ): Promise<operations.CheckAccessResponse> {
    return unwrapAsync(githubCheckAccess(
      this,
      org,
      repo,
      options,
    ));
  }

  async fetchPublishingPRs(
    generateGenLockId: string,
    org: string,
    repo: string,
    options?: RequestOptions,
  ): Promise<operations.FetchPublishingPRsResponse> {
    return unwrapAsync(githubFetchPublishingPRs(
      this,
      generateGenLockId,
      org,
      repo,
      options,
    ));
  }

  async githubCheckPublishingSecrets(
    generateGenLockId: string,
    options?: RequestOptions,
  ): Promise<operations.GithubCheckPublishingSecretsResponse> {
    return unwrapAsync(githubGithubCheckPublishingSecrets(
      this,
      generateGenLockId,
      options,
    ));
  }

  async githubStorePublishingSecrets(
    request: components.GithubStorePublishingSecretsRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubStorePublishingSecretsResponse> {
    return unwrapAsync(githubGithubStorePublishingSecrets(
      this,
      request,
      options,
    ));
  }

  async configureCodeSamples(
    request: components.GithubConfigureCodeSamplesRequest,
    options?: RequestOptions,
  ): Promise<operations.ConfigureCodeSamplesResponse> {
    return unwrapAsync(githubConfigureCodeSamples(
      this,
      request,
      options,
    ));
  }

  async configureMintlifyRepo(
    request: components.GithubConfigureMintlifyRepoRequest,
    options?: RequestOptions,
  ): Promise<operations.ConfigureMintlifyRepoResponse> {
    return unwrapAsync(githubConfigureMintlifyRepo(
      this,
      request,
      options,
    ));
  }

  async configureTarget(
    request: components.GithubConfigureTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.ConfigureTargetResponse> {
    return unwrapAsync(githubConfigureTarget(
      this,
      request,
      options,
    ));
  }

  async triggerAction(
    request: components.GithubTriggerActionRequest,
    options?: RequestOptions,
  ): Promise<operations.TriggerActionResponse> {
    return unwrapAsync(githubTriggerAction(
      this,
      request,
      options,
    ));
  }

  async getAction(
    org: string,
    repo: string,
    targetName?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetActionResponse> {
    return unwrapAsync(githubGetAction(
      this,
      org,
      repo,
      targetName,
      options,
    ));
  }
}
