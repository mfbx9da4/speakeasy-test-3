/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGetWorkspaceEventsByTarget } from "../funcs/eventsGetWorkspaceEventsByTarget.js";
import { eventsGetWorkspaceTargets } from "../funcs/eventsGetWorkspaceTargets.js";
import { eventsPostWorkspaceEvents } from "../funcs/eventsPostWorkspaceEvents.js";
import { eventsSearchWorkspaceEvents } from "../funcs/eventsSearchWorkspaceEvents.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
  /**
   * Search events for a particular workspace by any field
   */
  async searchWorkspaceEvents(
    request: operations.SearchWorkspaceEventsRequest,
    options?: RequestOptions,
  ): Promise<operations.SearchWorkspaceEventsResponse> {
    return unwrapAsync(eventsSearchWorkspaceEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Post events for a specific workspace
   *
   * @remarks
   * Sends an array of events to be stored for a particular workspace.
   */
  async postWorkspaceEvents(
    requestBody: Array<components.CliEvent>,
    workspaceID?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostWorkspaceEventsResponse> {
    return unwrapAsync(eventsPostWorkspaceEvents(
      this,
      requestBody,
      workspaceID,
      options,
    ));
  }

  /**
   * Load recent events for a particular workspace
   */
  async getWorkspaceEventsByTarget(
    targetID: string,
    workspaceID?: string | undefined,
    afterCreatedAt?: Date | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetWorkspaceEventsByTargetResponse> {
    return unwrapAsync(eventsGetWorkspaceEventsByTarget(
      this,
      targetID,
      workspaceID,
      afterCreatedAt,
      options,
    ));
  }

  /**
   * Load targets for a particular workspace
   */
  async getWorkspaceTargets(
    workspaceID?: string | undefined,
    afterLastEventCreatedAt?: Date | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetWorkspaceTargetsResponse> {
    return unwrapAsync(eventsGetWorkspaceTargets(
      this,
      workspaceID,
      afterLastEventCreatedAt,
      options,
    ));
  }
}
