/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apisDeleteApi } from "../funcs/apisDeleteApi.js";
import { apisGenerateOpenApiSpec } from "../funcs/apisGenerateOpenApiSpec.js";
import { apisGeneratePostmanCollection } from "../funcs/apisGeneratePostmanCollection.js";
import { apisGetAllApiVersions } from "../funcs/apisGetAllApiVersions.js";
import { apisGetApis } from "../funcs/apisGetApis.js";
import { apisUpsertApi } from "../funcs/apisUpsertApi.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Apis extends ClientSDK {
  /**
   * Get a list of Apis for a given workspace
   *
   * @remarks
   * Get a list of all Apis and their versions for a given workspace.
   * Supports filtering the APIs based on metadata attributes.
   */
  async getApis(
    op?: operations.Op | undefined,
    metadata?: { [k: string]: Array<string> } | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetApisResponse> {
    return unwrapAsync(apisGetApis(
      this,
      op,
      metadata,
      options,
    ));
  }

  /**
   * Get all Api versions for a particular ApiEndpoint.
   *
   * @remarks
   * Get all Api versions for a particular ApiEndpoint.
   * Supports filtering the versions based on metadata attributes.
   */
  async getAllApiVersions(
    apiID: string,
    op?: operations.QueryParamOp | undefined,
    metadata?: { [k: string]: Array<string> } | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetAllApiVersionsResponse> {
    return unwrapAsync(apisGetAllApiVersions(
      this,
      apiID,
      op,
      metadata,
      options,
    ));
  }

  /**
   * Upsert an Api
   *
   * @remarks
   * Upsert an Api. If the Api does not exist, it will be created.
   * If the Api exists, it will be updated.
   */
  async upsertApi(
    api: components.ApiInput,
    apiID: string,
    options?: RequestOptions,
  ): Promise<operations.UpsertApiResponse> {
    return unwrapAsync(apisUpsertApi(
      this,
      api,
      apiID,
      options,
    ));
  }

  /**
   * Delete an Api.
   *
   * @remarks
   * Delete a particular version of an Api. The will also delete all associated ApiEndpoints, Metadata, Schemas & Request Logs (if using a Postgres datastore).
   */
  async deleteApi(
    apiID: string,
    versionID: string,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiResponse> {
    return unwrapAsync(apisDeleteApi(
      this,
      apiID,
      versionID,
      options,
    ));
  }

  /**
   * Generate an OpenAPI specification for a particular Api.
   *
   * @remarks
   * This endpoint will generate any missing operations in any registered OpenAPI document if the operation does not already exist in the document.
   * Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
   */
  async generateOpenApiSpec(
    apiID: string,
    versionID: string,
    options?: RequestOptions,
  ): Promise<operations.GenerateOpenApiSpecResponse> {
    return unwrapAsync(apisGenerateOpenApiSpec(
      this,
      apiID,
      versionID,
      options,
    ));
  }

  /**
   * Generate a Postman collection for a particular Api.
   *
   * @remarks
   * Generates a postman collection containing all endpoints for a particular API. Includes variables produced for any path/query/header parameters included in the OpenAPI document.
   */
  async generatePostmanCollection(
    apiID: string,
    versionID: string,
    options?: RequestOptions,
  ): Promise<operations.GeneratePostmanCollectionResponse> {
    return unwrapAsync(apisGeneratePostmanCollection(
      this,
      apiID,
      versionID,
      options,
    ));
  }
}
