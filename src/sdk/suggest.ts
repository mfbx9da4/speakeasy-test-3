/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { suggestSuggest } from "../funcs/suggestSuggest.js";
import { suggestSuggestOpenAPI } from "../funcs/suggestSuggestOpenAPI.js";
import { suggestSuggestOpenAPIRegistry } from "../funcs/suggestSuggestOpenAPIRegistry.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Suggest extends ClientSDK {
  /**
   * (DEPRECATED) Generate suggestions for improving an OpenAPI document.
   *
   * @remarks
   * Get suggestions from an LLM model for improving an OpenAPI document.
   */
  async suggestOpenAPI(
    requestBody: operations.SuggestOpenAPIRequestBody,
    xSessionId: string,
    options?: RequestOptions,
  ): Promise<operations.SuggestOpenAPIResponse> {
    return unwrapAsync(suggestSuggestOpenAPI(
      this,
      requestBody,
      xSessionId,
      options,
    ));
  }

  /**
   * Generate suggestions for improving an OpenAPI document.
   *
   * @remarks
   * Get suggestions from an LLM model for improving an OpenAPI document.
   */
  async suggest(
    suggestRequestBody: components.SuggestRequestBody,
    xSessionId: string,
    options?: RequestOptions,
  ): Promise<operations.SuggestResponse> {
    return unwrapAsync(suggestSuggest(
      this,
      suggestRequestBody,
      xSessionId,
      options,
    ));
  }

  /**
   * Generate suggestions for improving an OpenAPI document stored in the registry.
   *
   * @remarks
   * Get suggestions from an LLM model for improving an OpenAPI document stored in the registry.
   */
  async suggestOpenAPIRegistry(
    xSessionId: string,
    namespaceName: string,
    revisionReference: string,
    suggestRequestBody?: components.SuggestRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.SuggestOpenAPIRegistryResponse> {
    return unwrapAsync(suggestSuggestOpenAPIRegistry(
      this,
      xSessionId,
      namespaceName,
      revisionReference,
      suggestRequestBody,
      options,
    ));
  }
}
