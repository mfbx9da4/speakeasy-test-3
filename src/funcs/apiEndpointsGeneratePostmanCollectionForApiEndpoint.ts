/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

export enum GeneratePostmanCollectionForApiEndpointAcceptEnum {
  applicationJson = "application/json",
  applicationOctetStream = "application/octet-stream",
}

/**
 * Generate a Postman collection for a particular ApiEndpoint.
 *
 * @remarks
 * Generates a postman collection that allows the endpoint to be called from postman variables produced for any path/query/header parameters included in the OpenAPI document.
 */
export async function apiEndpointsGeneratePostmanCollectionForApiEndpoint(
  client$: SDKCore,
  apiID: string,
  versionID: string,
  apiEndpointID: string,
  options?: RequestOptions & {
    acceptHeaderOverride?: GeneratePostmanCollectionForApiEndpointAcceptEnum;
  },
): Promise<
  Result<
    operations.GeneratePostmanCollectionForApiEndpointResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input$: operations.GeneratePostmanCollectionForApiEndpointRequest = {
    apiID: apiID,
    versionID: versionID,
    apiEndpointID: apiEndpointID,
  };

  const parsed$ = schemas$.safeParse(
    input$,
    (value$) =>
      operations.GeneratePostmanCollectionForApiEndpointRequest$outboundSchema
        .parse(value$),
    "Input validation failed",
  );
  if (!parsed$.ok) {
    return parsed$;
  }
  const payload$ = parsed$.value;
  const body$ = null;

  const pathParams$ = {
    apiEndpointID: encodeSimple$("apiEndpointID", payload$.apiEndpointID, {
      explode: false,
      charEncoding: "percent",
    }),
    apiID: encodeSimple$("apiID", payload$.apiID, {
      explode: false,
      charEncoding: "percent",
    }),
    versionID: encodeSimple$("versionID", payload$.versionID, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path$ = pathToFunc(
    "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman",
  )(pathParams$);

  const headers$ = new Headers({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/octet-stream;q=0",
  });

  const security$ = await extractSecurity(client$.options$.security);
  const context = {
    operationID: "generatePostmanCollectionForApiEndpoint",
    oAuth2Scopes: [],
    securitySource: client$.options$.security,
  };
  const securitySettings$ = resolveGlobalSecurity(security$);

  const requestRes = client$.createRequest$(context, {
    security: securitySettings$,
    method: "GET",
    path: path$,
    headers: headers$,
    body: body$,
    timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const request$ = requestRes.value;

  const doResult = await client$.do$(request$, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client$.options$.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields$ = {
    HttpMeta: { Response: response, Request: request$ },
  };

  const [result$] = await m$.match<
    operations.GeneratePostmanCollectionForApiEndpointResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    m$.stream(
      200,
      operations.GeneratePostmanCollectionForApiEndpointResponse$inboundSchema,
      { key: "PostmanCollection" },
    ),
    m$.fail(["4XX", "5XX"]),
    m$.json(
      "default",
      operations.GeneratePostmanCollectionForApiEndpointResponse$inboundSchema,
      { key: "Error" },
    ),
  )(response, request$, { extraFields: responseFields$ });
  if (!result$.ok) {
    return result$;
  }

  return result$;
}
