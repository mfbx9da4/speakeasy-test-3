/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import {
  encodeJSON as encodeJSON$,
  encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * Generate suggestions for improving an OpenAPI document stored in the registry.
 *
 * @remarks
 * Get suggestions from an LLM model for improving an OpenAPI document stored in the registry.
 */
export async function suggestSuggestOpenAPIRegistry(
  client$: SDKCore,
  xSessionId: string,
  namespaceName: string,
  revisionReference: string,
  suggestRequestBody?: components.SuggestRequestBody | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    operations.SuggestOpenAPIRegistryResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input$: operations.SuggestOpenAPIRegistryRequest = {
    xSessionId: xSessionId,
    namespaceName: namespaceName,
    revisionReference: revisionReference,
    suggestRequestBody: suggestRequestBody,
  };

  const parsed$ = schemas$.safeParse(
    input$,
    (value$) =>
      operations.SuggestOpenAPIRegistryRequest$outboundSchema.parse(value$),
    "Input validation failed",
  );
  if (!parsed$.ok) {
    return parsed$;
  }
  const payload$ = parsed$.value;
  const body$ = encodeJSON$("body", payload$.SuggestRequestBody, {
    explode: true,
  });

  const pathParams$ = {
    namespace_name: encodeSimple$("namespace_name", payload$.namespace_name, {
      explode: false,
      charEncoding: "percent",
    }),
    revision_reference: encodeSimple$(
      "revision_reference",
      payload$.revision_reference,
      { explode: false, charEncoding: "percent" },
    ),
  };

  const path$ = pathToFunc(
    "/v1/suggest/openapi/{namespace_name}/{revision_reference}",
  )(pathParams$);

  const headers$ = new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
    "x-session-id": encodeSimple$("x-session-id", payload$["x-session-id"], {
      explode: false,
      charEncoding: "none",
    }),
  });

  const security$ = await extractSecurity(client$.options$.security);
  const context = {
    operationID: "suggestOpenAPIRegistry",
    oAuth2Scopes: [],
    securitySource: client$.options$.security,
  };
  const securitySettings$ = resolveGlobalSecurity(security$);

  const requestRes = client$.createRequest$(context, {
    security: securitySettings$,
    method: "POST",
    path: path$,
    headers: headers$,
    body: body$,
    timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const request$ = requestRes.value;

  const doResult = await client$.do$(request$, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client$.options$.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields$ = {
    HttpMeta: { Response: response, Request: request$ },
  };

  const [result$] = await m$.match<
    operations.SuggestOpenAPIRegistryResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    m$.stream(200, operations.SuggestOpenAPIRegistryResponse$inboundSchema, {
      ctype: "application/json",
      key: "Schema",
    }),
    m$.fail(["4XX", "5XX"]),
  )(response, request$, { extraFields: responseFields$ });
  if (!result$.ok) {
    return result$;
  }

  return result$;
}
