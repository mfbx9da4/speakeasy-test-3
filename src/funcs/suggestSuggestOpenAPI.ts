/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * (DEPRECATED) Generate suggestions for improving an OpenAPI document.
 *
 * @remarks
 * Get suggestions from an LLM model for improving an OpenAPI document.
 */
export async function suggestSuggestOpenAPI(
  client: SDKCore,
  requestBody: operations.SuggestOpenAPIRequestBody,
  xSessionId: string,
  options?: RequestOptions,
): Promise<
  Result<
    operations.SuggestOpenAPIResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input: operations.SuggestOpenAPIRequest = {
    requestBody: requestBody,
    xSessionId: xSessionId,
  };

  const parsed = safeParse(
    input,
    (value) => operations.SuggestOpenAPIRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();

  if (isBlobLike(payload.RequestBody.schema)) {
    body.append("schema", payload.RequestBody.schema);
  } else if (isReadableStream(payload.RequestBody.schema.content)) {
    const buffer = await readableStreamToArrayBuffer(
      payload.RequestBody.schema.content,
    );
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    body.append("schema", blob);
  } else {
    body.append(
      "schema",
      new Blob([payload.RequestBody.schema.content], {
        type: "application/octet-stream",
      }),
      payload.RequestBody.schema.fileName,
    );
  }
  if (payload.RequestBody.opts !== undefined) {
    body.append(
      "opts",
      encodeJSON("opts", payload.RequestBody.opts, { explode: true }),
    );
  }

  const path = pathToFunc("/v1/suggest/openapi")();

  const headers = new Headers({
    Accept: "application/json",
    "x-session-id": encodeSimple("x-session-id", payload["x-session-id"], {
      explode: false,
      charEncoding: "none",
    }),
  });

  const securityInput = await extractSecurity(client._options.security);
  const context = {
    operationID: "suggestOpenAPI",
    oAuth2Scopes: [],
    securitySource: client._options.security,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.SuggestOpenAPIResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.stream("2XX", operations.SuggestOpenAPIResponse$inboundSchema, {
      ctype: "application/json",
      key: "Schema",
    }),
    M.fail(["4XX", "5XX"]),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
